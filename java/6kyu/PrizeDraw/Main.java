// https://www.codewars.com/kata/5616868c81a0f281e500005c/train/java// 6kyu
import java.util.Arrays;import java.util.Map;import java.util.LinkedHashMap;
public class Main {
    public static void main(String[] args){                // Tests                System.out.println("Fixed Tests");        String st = "";        Integer[] we = new Integer[] {4, 2, 1, 4, 3, 1, 2};        System.out.println("No participants -> " + nthRank(st, we, 4));                st = "Addison,Jayden,Sofia,Michael,Andrew,Lily,Benjamin";        we = new Integer[] {4, 2, 1, 4, 3, 1, 2};        System.out.println("Not enough participants -> " + nthRank(st, we, 8));                st = "Addison,Jayden,Sofia,Michael,Andrew,Lily,Benjamin";        we = new Integer[] {4, 2, 1, 4, 3, 1, 2};        System.out.println("Benjamin -> " + nthRank(st, we, 4));                st = "Elijah,Chloe,Elizabeth,Matthew,Natalie,Jayden";        we = new Integer[] {1, 3, 5, 5, 3, 6};        System.out.println("Matthew -> " + nthRank(st, we, 2));
    }
        public static String nthRank(String st, Integer[] we, int n) {                 String[] participants = st.split(",");                if (n > participants.length) return "Not enough participants";
        Map<String, Integer> ranking = new LinkedHashMap<>();
        for(String name: participants){                    int numberOfLetters = name.length();            int pRank = numberOfLetters;                        for(int i = 0; i < numberOfLetters; i++){                String letter = name.substring(i, i+1).toLowerCase();
                pRank += ("abcdefghijklmnopqrstuvwxyz".indexOf(letter)+1);            }
            pRank *= we[Arrays.asList(participants).indexOf(name)];                        System.out.println(name + ": " + pRank);                        ranking.put(name, pRank);                    }                int rankCount = 0;        int highestRank = 0;        for(String rankName: ranking.keySet()){                        int value = ranking.get(rankName);            if (value > highestRank){                if (rankCount == n){                    return rankName;                }                rankCount++;                highestRank = value;            }                    }                        return "No participants";    }}
